"""迭代器与生成器"""

"""迭代器"""
# 双下方法：双下划线开头的内置方法。一般通过其他语法使用
# 可迭代协议:含有__iter__()方法的数据类型，都可迭代
# 可迭代的一定可以被for循环
# 迭代器协议：拥有__next__()和__iter__()方法的，就是迭代器

# 可迭代的数据类型通过调用 iter()方法能返回迭代器
# 迭代器的特点：
    # 方便使用
    # 节省内存空间

"""生成器"""
# 本质：生成器本质也是迭代器
# 生成器的表现形式
    # 生成器函数
        # 含有 yield 关键字的函数就是生成器函数
        # 特点：
            # 调用函数时，不执行函数，返回生成器
            # 每次调用该生成器next方法时能取到一个值
            # 取到最后一个值时，再执行next方法会报错
    # 生成器表达式
# 从生成器中取值的几个方法：
    # next方法
    # for循环
    # 数据类型的强制转换

# 练习
def generator_whh():
    for i in range(2000000):
        yield i
num = 0
g = generator_whh()
print('*&****第{}个whh'.format(g.__next__()))
for i in g:
    print('第{}个whh'.format(i))
    num += 1
    if num > 49:
        break




# 作业
# 有一个文件，从文件里分段读取内容。
# 读出的内容前加上 ‘***’

